#include<stdio.h>
 int main()
{
   int i, j, nProc, pos, tem, tEjec[20], prio[20], tEsp[20], tLleg[20], total=0;
   float tPromEs, tPromRes;

   printf("Ingresa el numero de procesos: ");
   scanf("%d", &nProc);

   printf("Ingresa el tiempo de ejecucion del proceso: ");
   for (i=0; i<nProc; i++) //De acuerdo al la cantidad de procesos ingresados, se iran  pidiendo el tiempo de ejecucion
   {
     printf ("\n proceso%d: ", i+1); //Aqui se iran ingresando los tiempos de ejecucion de cada proceso
     scanf("%d", &tEjec[i]); //Guarda los datos ingresados del tiempo de ejecucion del proceso en el vector  
     prio[i]= i + 1;
   }

//prioridad de los tiempos de ejecucion de cada proceso
  for(i=0; i<nProc;i++) //para i
   {
    pos=i;
    for (j=i+1; j<nProc;j++)
     {
      if (tEjec[j] < tEjec[pos]) //si el tiempo de ejecucion en j es menor que el tiempo de ejecucion de la posicion
            pos=j; //la posicion sera igual a j
     }

    tem= tEjec[i];
    tEjec[i]= tEjec[pos];
    tEjec[pos]= tem;


    tem= prio[i];
    prio[i] = prio[pos];
    prio[pos]=tem;

   }
    tEsp[0]=0; //al tiempo de Espera, le asignamos el valor de 0, en la posicion 0

    for (i=1;i<nProc; i++) //iniciamos el ciclo, para i, hasta que llegue al numero de procesos
    {
    tEsp[i]=0;  //asignamos un valor de cero a cada ubicacion del arreglo e iniciamos otro ciclo
    for (j=0; j<i;j++) //hasta que j, sea igual al valor del tiempo de Espera ingresado
          tEsp[i]+=tEjec[j]; //El tiempo de espera es igual al Tiempo de espera mas el tiempo de ejecucion
            total+=tEsp[j];  //el total es igual a total + tEspera
    }

     tPromEs = (float) total/nProc;
     total= 0;


     printf("\n No.Proceso   Tiempo Espera   T.Prom. Espera   T.Prom. Respuesta");
     for(i=0; i<nProc; i++)
      {
       tLleg[i]= tEjec[i] + tEsp[i];
       total+=tLleg[i];
       printf("\n Proc:%dtt       %dttt%d", prio[i], tEjec[i], tEsp[i], tLleg[i]);

      }




}
--------------------------------------------------------------
#include "scheduler.h"

static int buscarIndex_empty(array_procesos *_array);
static void initArray(array_procesos *_array);
static bool isOk_ID_Process(array_procesos *_array, process _t);

process *crear_Proceso(int _id, int _delay, char *_nombreProceso, FN_ACCION _proceso_realizar, int _estado){
	process *_p = (process *)malloc(sizeof(process));
	_p->id = _id;
	_p->delay = _delay;
	strcpy(_p->nombrePROCESO, _nombreProceso);
	_p->proceso_realizar = _proceso_realizar;
	_p->estado = _estado;
	return _p;
}

void agregar_Proceso(array_procesos *_array, process _p){
	int _index = buscarIndex_empty(_array);
	bool id_ok = isOk_ID_Process(_array, _p);
	if(_index != -1){
		if(id_ok != false){
			_array[_index].proceso = _p;
			_array[_index].empty = false;
			printf("Se agrego a [_array] el proceso [%s] con id [%d] <---- OK\n", _array[_index].proceso.nombrePROCESO, _array[_index].proceso.id);
			cont_procesos++;
		}
		else{
			printf("El ID [%d] ya se encuentra asociado a un Proceso...\n", _p.id);
		}
	}
	else{
		printf("NO hay index disponible...\n");
	}
}

void ejecutar_Procesos(array_procesos *_array){
	printf("-----> Procesos = [%d]\n", cont_procesos);
	for(int i = 0; i < cont_procesos; i++){
		if(_array[i].proceso.estado == ACTIVO){
			printf("<=================================================================================>\n");
			printf("\tEl proceso de nombre [%s], con ID [%d], se encuentra realizando su [PROCESO], con un delay de [%d] segundo(s)\n", _array[i].proceso.nombrePROCESO, _array[i].proceso.id, _array[i].proceso.delay);
			_array[i].proceso.proceso_realizar();
			printf("<=================================================================================>\n");
			for(int j = 0; j < _array[i].proceso.delay; j++){
				sleep(1);
			}
		}
		else if(_array[i].proceso.estado == NO_ACTIVO){
			printf("<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>\n");
			printf("\tEl proceso de nombre [%s], con ID [%d], SE ENCUENTRA EN ESTADO NO ACTIVO\n", _array[i].proceso.nombrePROCESO, _array[i].proceso.id);
			printf("<+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>\n");
		}
		else{
			;
		}
	}
}

array_procesos *crear_ArrayProcesos(void){
	array_procesos *array = (array_procesos *)malloc(sizeof(array_procesos)*MAX_PROCESOS);
	initArray(array);
	return array;
}

/* PRIVATE FUNCTIONS */

static bool isOk_ID_Process(array_procesos *_array, process _p){
	bool id_Ok = true;
	for(int i = 0; i < MAX_PROCESOS; i++){
		if(_array[i].proceso.id == _p.id){
			id_Ok = false;
			break;
		}
	}
	return id_Ok;
}

static void initArray(array_procesos *_array){
	for(int i = 0; i < MAX_PROCESOS; i++){
		_array[i].proceso.id = -1;
		_array[i].empty = true;
	}
}

static int buscarIndex_empty(array_procesos *_array){
	int _index_empty = -1;
	for(int i = 0; i < MAX_PROCESOS; i++){
		if(_array[i].empty == true){
			_index_empty = i;
			break;
		}
	}
	return _index_empty;
}
